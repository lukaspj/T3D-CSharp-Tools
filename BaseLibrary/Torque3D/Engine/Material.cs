using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Torque3D.Engine;
using Torque3D.Util;

namespace Torque3D
{
	public unsafe class Material : SimObject
	{
		public Material(bool pRegister = false)
			: base(pRegister)
		{
		}

		public Material(string pName, bool pRegister = false)
			: this(false)
		{
			Name = pName;
			if (pRegister) registerObject();
		}

		public Material(string pName, string pParent, bool pRegister = false)
         : this(pName, pRegister)
		{
			CopyFrom(Sim.FindObject<SimObject>(pParent));
		}

		public Material(string pName, SimObject pParent, bool pRegister = false)
         : this(pName, pRegister)
		{
			CopyFrom(pParent);
		}

		public Material(SimObject pObj) : base(pObj)
		{
		}

		public Material(IntPtr pObjPtr) : base(pObjPtr)
		{
		}

		protected override void CreateSimObjectPtr()
		{
			ObjectPtr = InternalUnsafeMethods.Material_create();
		}

      #region UnsafeNativeMethods
      
      new internal struct InternalUnsafeMethods
      {
      
         [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
         private delegate void _flush(IntPtr thisPtr);
         private static _flush _flushFunc;
         internal static void flush(IntPtr thisPtr)
         {
         	if (_flushFunc == null)
         	{
         		_flushFunc =
         			(_flush)Marshal.GetDelegateForFunctionPointer(Torque3D.DllLoadUtils.GetProcAddress(Torque3D.Torque3DLibHandle,
         				"fn_Material_flush"), typeof(_flush));
         	}
         
         	 _flushFunc(thisPtr);
         }
      
         [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
         private delegate void _reload(IntPtr thisPtr);
         private static _reload _reloadFunc;
         internal static void reload(IntPtr thisPtr)
         {
         	if (_reloadFunc == null)
         	{
         		_reloadFunc =
         			(_reload)Marshal.GetDelegateForFunctionPointer(Torque3D.DllLoadUtils.GetProcAddress(Torque3D.Torque3DLibHandle,
         				"fn_Material_reload"), typeof(_reload));
         	}
         
         	 _reloadFunc(thisPtr);
         }
      
         [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
         private delegate void _dumpInstances(IntPtr thisPtr);
         private static _dumpInstances _dumpInstancesFunc;
         internal static void dumpInstances(IntPtr thisPtr)
         {
         	if (_dumpInstancesFunc == null)
         	{
         		_dumpInstancesFunc =
         			(_dumpInstances)Marshal.GetDelegateForFunctionPointer(Torque3D.DllLoadUtils.GetProcAddress(Torque3D.Torque3DLibHandle,
         				"fn_Material_dumpInstances"), typeof(_dumpInstances));
         	}
         
         	 _dumpInstancesFunc(thisPtr);
         }
      
         [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
         private delegate IntPtr _getAnimFlags(IntPtr thisPtr, uint id);
         private static _getAnimFlags _getAnimFlagsFunc;
         internal static IntPtr getAnimFlags(IntPtr thisPtr, uint id)
         {
         	if (_getAnimFlagsFunc == null)
         	{
         		_getAnimFlagsFunc =
         			(_getAnimFlags)Marshal.GetDelegateForFunctionPointer(Torque3D.DllLoadUtils.GetProcAddress(Torque3D.Torque3DLibHandle,
         				"fn_Material_getAnimFlags"), typeof(_getAnimFlags));
         	}
         
         	return  _getAnimFlagsFunc(thisPtr, id);
         }
      
         [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
         private delegate IntPtr _getFilename(IntPtr thisPtr);
         private static _getFilename _getFilenameFunc;
         internal static IntPtr getFilename(IntPtr thisPtr)
         {
         	if (_getFilenameFunc == null)
         	{
         		_getFilenameFunc =
         			(_getFilename)Marshal.GetDelegateForFunctionPointer(Torque3D.DllLoadUtils.GetProcAddress(Torque3D.Torque3DLibHandle,
         				"fn_Material_getFilename"), typeof(_getFilename));
         	}
         
         	return  _getFilenameFunc(thisPtr);
         }
      
         [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
         [return: MarshalAs(UnmanagedType.I1)]
         private delegate bool _isAutoGenerated(IntPtr thisPtr);
         private static _isAutoGenerated _isAutoGeneratedFunc;
         internal static bool isAutoGenerated(IntPtr thisPtr)
         {
         	if (_isAutoGeneratedFunc == null)
         	{
         		_isAutoGeneratedFunc =
         			(_isAutoGenerated)Marshal.GetDelegateForFunctionPointer(Torque3D.DllLoadUtils.GetProcAddress(Torque3D.Torque3DLibHandle,
         				"fn_Material_isAutoGenerated"), typeof(_isAutoGenerated));
         	}
         
         	return  _isAutoGeneratedFunc(thisPtr);
         }
      
         [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
         private delegate void _setAutoGenerated(IntPtr thisPtr, bool isAutoGenerated);
         private static _setAutoGenerated _setAutoGeneratedFunc;
         internal static void setAutoGenerated(IntPtr thisPtr, bool isAutoGenerated)
         {
         	if (_setAutoGeneratedFunc == null)
         	{
         		_setAutoGeneratedFunc =
         			(_setAutoGenerated)Marshal.GetDelegateForFunctionPointer(Torque3D.DllLoadUtils.GetProcAddress(Torque3D.Torque3DLibHandle,
         				"fn_Material_setAutoGenerated"), typeof(_setAutoGenerated));
         	}
         
         	 _setAutoGeneratedFunc(thisPtr, isAutoGenerated);
         }
      
         [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
         private delegate IntPtr _Material_create();
         private static _Material_create _Material_createFunc;
         internal static IntPtr Material_create()
         {
         	if (_Material_createFunc == null)
         	{
         		_Material_createFunc =
         			(_Material_create)Marshal.GetDelegateForFunctionPointer(Torque3D.DllLoadUtils.GetProcAddress(Torque3D.Torque3DLibHandle,
         				"fn_Material_create"), typeof(_Material_create));
         	}
         
         	return  _Material_createFunc();
         }
      
      }
      
      #endregion


      #region Functions
      
      
         public virtual void flush()
         {
            InternalUnsafeMethods.flush(ObjectPtr);
         }
      
         public virtual void reload()
         {
            InternalUnsafeMethods.reload(ObjectPtr);
         }
      
         public virtual void dumpInstances()
         {
            InternalUnsafeMethods.dumpInstances(ObjectPtr);
         }
      
         public virtual string getAnimFlags(uint id)
         {
            return Marshal.PtrToStringUni(InternalUnsafeMethods.getAnimFlags(ObjectPtr, id));
         }
      
         public virtual string getFilename()
         {
            return Marshal.PtrToStringUni(InternalUnsafeMethods.getFilename(ObjectPtr));
         }
      
         public virtual bool isAutoGenerated()
         {
            return InternalUnsafeMethods.isAutoGenerated(ObjectPtr);
         }
      
         public virtual void setAutoGenerated(bool isAutoGenerated)
         {
            InternalUnsafeMethods.setAutoGenerated(ObjectPtr, isAutoGenerated);
         }
      
      
      #endregion


      #region Properties
      
      
         public string MapTo
         {
         	get { return getFieldValue("MapTo"); }
         	set { setFieldValue("MapTo", value); }
         }
      
         public DynamicFieldVector<LinearColorF> DiffuseColor
         {
         	get { return new DynamicFieldVector<LinearColorF>(this, "DiffuseColor", 4, val => new LinearColorF(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<string> DiffuseMap
         {
         	get { return new DynamicFieldVector<string>(this, "DiffuseMap", 4, val => val, obj => obj); }
         }
      
         public DynamicFieldVector<bool> DiffuseMapSRGB
         {
         	get { return new DynamicFieldVector<bool>(this, "DiffuseMapSRGB", 4, val => GenericMarshal.StringToBool(val), obj => obj ? "1" : "0"); }
         }
      
         public DynamicFieldVector<string> OverlayMap
         {
         	get { return new DynamicFieldVector<string>(this, "OverlayMap", 4, val => val, obj => obj); }
         }
      
         public DynamicFieldVector<string> LightMap
         {
         	get { return new DynamicFieldVector<string>(this, "LightMap", 4, val => val, obj => obj); }
         }
      
         public DynamicFieldVector<string> ToneMap
         {
         	get { return new DynamicFieldVector<string>(this, "ToneMap", 4, val => val, obj => obj); }
         }
      
         public DynamicFieldVector<string> DetailMap
         {
         	get { return new DynamicFieldVector<string>(this, "DetailMap", 4, val => val, obj => obj); }
         }
      
         public DynamicFieldVector<Point2F> DetailScale
         {
         	get { return new DynamicFieldVector<Point2F>(this, "DetailScale", 4, val => new Point2F(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<string> NormalMap
         {
         	get { return new DynamicFieldVector<string>(this, "NormalMap", 4, val => val, obj => obj); }
         }
      
         public DynamicFieldVector<string> DetailNormalMap
         {
         	get { return new DynamicFieldVector<string>(this, "DetailNormalMap", 4, val => val, obj => obj); }
         }
      
         public DynamicFieldVector<float> DetailNormalMapStrength
         {
         	get { return new DynamicFieldVector<float>(this, "DetailNormalMapStrength", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<LinearColorF> Specular
         {
         	get { return new DynamicFieldVector<LinearColorF>(this, "Specular", 4, val => new LinearColorF(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<float> SpecularPower
         {
         	get { return new DynamicFieldVector<float>(this, "SpecularPower", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<float> SpecularStrength
         {
         	get { return new DynamicFieldVector<float>(this, "SpecularStrength", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<bool> PixelSpecular
         {
         	get { return new DynamicFieldVector<bool>(this, "PixelSpecular", 4, val => GenericMarshal.StringToBool(val), obj => obj ? "1" : "0"); }
         }
      
         public DynamicFieldVector<bool> AccuEnabled
         {
         	get { return new DynamicFieldVector<bool>(this, "AccuEnabled", 4, val => GenericMarshal.StringToBool(val), obj => obj ? "1" : "0"); }
         }
      
         public DynamicFieldVector<float> AccuScale
         {
         	get { return new DynamicFieldVector<float>(this, "AccuScale", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<float> AccuDirection
         {
         	get { return new DynamicFieldVector<float>(this, "AccuDirection", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<float> AccuStrength
         {
         	get { return new DynamicFieldVector<float>(this, "AccuStrength", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<float> AccuCoverage
         {
         	get { return new DynamicFieldVector<float>(this, "AccuCoverage", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<float> AccuSpecular
         {
         	get { return new DynamicFieldVector<float>(this, "AccuSpecular", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<string> SpecularMap
         {
         	get { return new DynamicFieldVector<string>(this, "SpecularMap", 4, val => val, obj => obj); }
         }
      
         public DynamicFieldVector<float> ParallaxScale
         {
         	get { return new DynamicFieldVector<float>(this, "ParallaxScale", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<bool> UseAnisotropic
         {
         	get { return new DynamicFieldVector<bool>(this, "UseAnisotropic", 4, val => GenericMarshal.StringToBool(val), obj => obj ? "1" : "0"); }
         }
      
         public DynamicFieldVector<bool> VertLit
         {
         	get { return new DynamicFieldVector<bool>(this, "VertLit", 4, val => GenericMarshal.StringToBool(val), obj => obj ? "1" : "0"); }
         }
      
         public DynamicFieldVector<bool> VertColor
         {
         	get { return new DynamicFieldVector<bool>(this, "VertColor", 4, val => GenericMarshal.StringToBool(val), obj => obj ? "1" : "0"); }
         }
      
         public DynamicFieldVector<float> MinnaertConstant
         {
         	get { return new DynamicFieldVector<float>(this, "MinnaertConstant", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<bool> SubSurface
         {
         	get { return new DynamicFieldVector<bool>(this, "SubSurface", 4, val => GenericMarshal.StringToBool(val), obj => obj ? "1" : "0"); }
         }
      
         public DynamicFieldVector<LinearColorF> SubSurfaceColor
         {
         	get { return new DynamicFieldVector<LinearColorF>(this, "SubSurfaceColor", 4, val => new LinearColorF(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<float> SubSurfaceRolloff
         {
         	get { return new DynamicFieldVector<float>(this, "SubSurfaceRolloff", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<bool> Glow
         {
         	get { return new DynamicFieldVector<bool>(this, "Glow", 4, val => GenericMarshal.StringToBool(val), obj => obj ? "1" : "0"); }
         }
      
         public DynamicFieldVector<bool> Emissive
         {
         	get { return new DynamicFieldVector<bool>(this, "Emissive", 4, val => GenericMarshal.StringToBool(val), obj => obj ? "1" : "0"); }
         }
      
         public bool DoubleSided
         {
         	get { return GenericMarshal.StringToBool(getFieldValue("DoubleSided")); }
         	set { setFieldValue("DoubleSided", value ? "1" : "0"); }
         }
      
         public DynamicFieldVector<MaterialAnimType> AnimFlags
         {
         	get { return new DynamicFieldVector<MaterialAnimType>(this, "AnimFlags", 4, val => (MaterialAnimType)Enum.Parse(typeof(MaterialAnimType), val, true), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<Point2F> ScrollDir
         {
         	get { return new DynamicFieldVector<Point2F>(this, "ScrollDir", 4, val => new Point2F(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<float> ScrollSpeed
         {
         	get { return new DynamicFieldVector<float>(this, "ScrollSpeed", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<float> RotSpeed
         {
         	get { return new DynamicFieldVector<float>(this, "RotSpeed", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<Point2F> RotPivotOffset
         {
         	get { return new DynamicFieldVector<Point2F>(this, "RotPivotOffset", 4, val => new Point2F(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<MaterialWaveType> WaveType
         {
         	get { return new DynamicFieldVector<MaterialWaveType>(this, "WaveType", 4, val => (MaterialWaveType)Enum.Parse(typeof(MaterialWaveType), val, true), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<float> WaveFreq
         {
         	get { return new DynamicFieldVector<float>(this, "WaveFreq", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<float> WaveAmp
         {
         	get { return new DynamicFieldVector<float>(this, "WaveAmp", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<float> SequenceFramePerSec
         {
         	get { return new DynamicFieldVector<float>(this, "SequenceFramePerSec", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<float> SequenceSegmentSize
         {
         	get { return new DynamicFieldVector<float>(this, "SequenceSegmentSize", 4, val => float.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<Point2I> CellIndex
         {
         	get { return new DynamicFieldVector<Point2I>(this, "CellIndex", 4, val => new Point2I(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<Point2I> CellLayout
         {
         	get { return new DynamicFieldVector<Point2I>(this, "CellLayout", 4, val => new Point2I(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<int> CellSize
         {
         	get { return new DynamicFieldVector<int>(this, "CellSize", 4, val => int.Parse(val), obj => obj.ToString()); }
         }
      
         public DynamicFieldVector<bool> BumpAtlas
         {
         	get { return new DynamicFieldVector<bool>(this, "BumpAtlas", 4, val => GenericMarshal.StringToBool(val), obj => obj ? "1" : "0"); }
         }
      
         public DynamicFieldVector<string> BaseTex
         {
         	get { return new DynamicFieldVector<string>(this, "BaseTex", 4, val => val, obj => obj); }
         }
      
         public DynamicFieldVector<string> DetailTex
         {
         	get { return new DynamicFieldVector<string>(this, "DetailTex", 4, val => val, obj => obj); }
         }
      
         public DynamicFieldVector<string> OverlayTex
         {
         	get { return new DynamicFieldVector<string>(this, "OverlayTex", 4, val => val, obj => obj); }
         }
      
         public DynamicFieldVector<string> BumpTex
         {
         	get { return new DynamicFieldVector<string>(this, "BumpTex", 4, val => val, obj => obj); }
         }
      
         public DynamicFieldVector<LinearColorF> ColorMultiply
         {
         	get { return new DynamicFieldVector<LinearColorF>(this, "ColorMultiply", 4, val => new LinearColorF(val), obj => obj.ToString()); }
         }
      
         public bool CastShadows
         {
         	get { return GenericMarshal.StringToBool(getFieldValue("CastShadows")); }
         	set { setFieldValue("CastShadows", value ? "1" : "0"); }
         }
      
         public bool CastDynamicShadows
         {
         	get { return GenericMarshal.StringToBool(getFieldValue("CastDynamicShadows")); }
         	set { setFieldValue("CastDynamicShadows", value ? "1" : "0"); }
         }
      
         public bool PlanarReflection
         {
         	get { return GenericMarshal.StringToBool(getFieldValue("PlanarReflection")); }
         	set { setFieldValue("PlanarReflection", value ? "1" : "0"); }
         }
      
         public bool Translucent
         {
         	get { return GenericMarshal.StringToBool(getFieldValue("Translucent")); }
         	set { setFieldValue("Translucent", value ? "1" : "0"); }
         }
      
         public MaterialBlendOp TranslucentBlendOp
         {
         	get { return (MaterialBlendOp)Enum.Parse(typeof(MaterialBlendOp), getFieldValue("TranslucentBlendOp"), true); }
         	set { setFieldValue("TranslucentBlendOp", value.ToString()); }
         }
      
         public bool TranslucentZWrite
         {
         	get { return GenericMarshal.StringToBool(getFieldValue("TranslucentZWrite")); }
         	set { setFieldValue("TranslucentZWrite", value ? "1" : "0"); }
         }
      
         public bool AlphaTest
         {
         	get { return GenericMarshal.StringToBool(getFieldValue("AlphaTest")); }
         	set { setFieldValue("AlphaTest", value ? "1" : "0"); }
         }
      
         public int AlphaRef
         {
         	get { return int.Parse(getFieldValue("AlphaRef")); }
         	set { setFieldValue("AlphaRef", value.ToString()); }
         }
      
         public string Cubemap
         {
         	get { return getFieldValue("Cubemap"); }
         	set { setFieldValue("Cubemap", value); }
         }
      
         public bool DynamicCubemap
         {
         	get { return GenericMarshal.StringToBool(getFieldValue("DynamicCubemap")); }
         	set { setFieldValue("DynamicCubemap", value ? "1" : "0"); }
         }
      
         public bool ShowFootprints
         {
         	get { return GenericMarshal.StringToBool(getFieldValue("ShowFootprints")); }
         	set { setFieldValue("ShowFootprints", value ? "1" : "0"); }
         }
      
         public bool ShowDust
         {
         	get { return GenericMarshal.StringToBool(getFieldValue("ShowDust")); }
         	set { setFieldValue("ShowDust", value ? "1" : "0"); }
         }
      
         public DynamicFieldVector<LinearColorF> EffectColor
         {
         	get { return new DynamicFieldVector<LinearColorF>(this, "EffectColor", 2, val => new LinearColorF(val), obj => obj.ToString()); }
         }
      
         public int FootstepSoundId
         {
         	get { return int.Parse(getFieldValue("FootstepSoundId")); }
         	set { setFieldValue("FootstepSoundId", value.ToString()); }
         }
      
         public SFXTrack CustomFootstepSound
         {
         	get { return Sim.FindObject<SFXTrack>(getFieldValue("CustomFootstepSound")); }
         	set { setFieldValue("CustomFootstepSound", value.getId().ToString()); }
         }
      
         public int ImpactSoundId
         {
         	get { return int.Parse(getFieldValue("ImpactSoundId")); }
         	set { setFieldValue("ImpactSoundId", value.ToString()); }
         }
      
         public SFXTrack CustomImpactSound
         {
         	get { return Sim.FindObject<SFXTrack>(getFieldValue("CustomImpactSound")); }
         	set { setFieldValue("CustomImpactSound", value.getId().ToString()); }
         }
      
      
      #endregion

	}
}