using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Torque3D.Engine;
using Torque3D.Util;

namespace Torque3D
{
	public unsafe class <<ClassName>> : IDisposable
	{
		//public Sim.SimObjectPtr* ObjectPtr { get; protected set; }
		public IntPtr ObjectPtr { get; protected set; }

		public SimObject(bool pRegister = false)
		{
			CreateSimObjectPtr();
			if (pRegister) registerObject();
		   SimDictionary.RegisterObject(this);
		}

		public SimObject(string pName, bool pRegister = false)
			: this(false)
		{
			Name = pName;
			if (pRegister) registerObject();
		}

		public SimObject(string pName, string pParent, bool pRegister = false)
         : this(pName, pRegister)
		{
			CopyFrom(Sim.FindObject<SimObject>(pParent));
		}

		public SimObject(string pName, SimObject pParent, bool pRegister = false)
         : this(pName, pRegister)
		{
			CopyFrom(pParent);
		}

		public SimObject(SimObject pObj)
		{
			SetPointerFromObject(pObj);
			SimDictionary.RegisterObject(this);
		}

		public SimObject(IntPtr pObjPtr)
		{
		   ObjectPtr = pObjPtr;
		   SimDictionary.RegisterObject(this);
		}

		public void SetPointerFromObject(SimObject pObj)
		{
		   if (!SimDictionary.Contains(pObj)) SimDictionary.RegisterObject(pObj);
			ObjectPtr = pObj.ObjectPtr;
		}

		public void SetPointer(IntPtr pObjPtr)
		{
			ObjectPtr = pObjPtr;
		   SimDictionary.RegisterObject(this);
      }

		public T As<T>() where T : SimObject
		{
			return (T)SimDictionary.CreateInstance(typeof(T), this);
		}

		public SimObject As(Type t)
		{
			if (!typeof(SimObject).IsAssignableFrom(t)) return null;
			return (SimObject)SimDictionary.CreateInstance(t, this);
		}

		public bool IsDead()
		{
			return SimDictionary.IsDead(ObjectPtr);
		}

		protected virtual void CreateSimObjectPtr()
		{
			ObjectPtr = InternalUnsafeMethods.SimObject_create();
		}

		#region IDisposable

		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		protected virtual void Dispose(bool pDisposing)
		{
			/*if (((IntPtr)ObjectPtr->RefPtr) != IntPtr.Zero)
			{
			Marshal.FreeHGlobal((IntPtr) ObjectPtr);
			}*/

		   SimDictionary.UnregisterObjectPtr(ObjectPtr);
		}

		~SimObject()
		{
			Dispose(false);
		}

		#endregion

<<Internals>>

<<Declarations>>

<<Properties>>

	#region Implicits and operators

	public static bool operator ==(SimObject obj, string str)
	{
		if (str == null) return ReferenceEquals(obj, null);
		if (ReferenceEquals(obj, null)) return false;
		return obj.Name == str || obj.getId().ToString().Equals(str);
	}

	public static bool operator !=(SimObject obj, string str)
	{
		return !(obj == str);
	}

	public static bool operator ==(SimObject obj, object other)
	{
		if (ReferenceEquals(other, null)) return ReferenceEquals(obj, null);
		if (ReferenceEquals(obj, null)) return false;
		string str = other as string;
		if (str != null)
		{
			return obj.Name == str || obj.getId().ToString().Equals(str);
		}
		SimObject sobj = other as SimObject;
		if(sobj != null)
		return obj.ObjectPtr == sobj.ObjectPtr;
		return obj.Equals(other);
	}

	public static bool operator !=(SimObject obj, object other)
	{
		return !(obj == other);
	}

	#endregion
	}
}