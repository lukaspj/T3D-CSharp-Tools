using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Torque3D.Engine;
using Torque3D.Util;

namespace Torque3D
{
	public unsafe class <<ClassName>> <<ParentString>>
	{
		public <<ClassName>>(bool pRegister = false)
			: base(pRegister)
		{
		}

		public <<ClassName>>(string pName, bool pRegister = false)
			: this(false)
		{
			Name = pName;
			if (pRegister) registerObject();
		}

		public <<ClassName>>(string pName, string pParent, bool pRegister = false)
         : this(pName, pRegister)
		{
			CopyFrom(Sim.FindObject<SimObject>(pParent));
		}

		public <<ClassName>>(string pName, SimObject pParent, bool pRegister = false)
         : this(pName, pRegister)
		{
			CopyFrom(pParent);
		}

		public <<ClassName>>(Sim.SimObjectPtr* pObjPtr) : base(pObjPtr)
		{
		}

		public <<ClassName>>(SimObject pObj) : base(pObj)
		{
		}

		public <<ClassName>>(IntPtr pObjPtr) : base(pObjPtr)
		{
		}

		protected override void CreateSimObjectPtr()
		{
			ObjectPtr = Sim.WrapObject(InternalUnsafeMethods.<<ClassName>>_create());
		}

<<Internals>>

<<Declarations>>

<<Properties>>
	}
}